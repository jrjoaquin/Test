{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Sample Template (Singapore Region Only)",
    "Parameters": {
        "VPCCIDR": {
            "Description": "CIDR of VPC",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.0.0/24",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "PUBCIDR1": {
            "Description": "CIDR of Public Subnet 1 (Must be in range of VPC CIDR)",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.0.0/27",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "PUBCIDR2": {
            "Description": "CIDR of Public Subnet 2 (Must be in range of VPC CIDR)",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.0.32/27",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "PRIVCIDR1": {
            "Description": "CIDR of Private Subnet 1 (Must be in range of VPC CIDR)",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.0.64/27",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "PRIVCIDR2": {
            "Description": "CIDR of Private Subnet 2 (Must be in range of VPC CIDR)",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.0.96/27",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "WEBEC2KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable access to the WEB SERVER instance",
            "MinLength": "1",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
        },
        "BASTIONEC2KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable access to the BASTION SERVER instance",
            "MinLength": "1",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
        }
    },
    "Mappings": {
        "RegionMap": {
            "ap-southeast-1": {
                "AMIAmazon": "ami-de90a5a2"
            }
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "CidrBlock": {
                    "Ref": "VPCCIDR"
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "GatewayToInternet": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "NATGateway": {
            "DependsOn": "GatewayToInternet",
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NATElasticIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnetAZ1"
                }
            }
        },
        "NATElasticIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnetAZ1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "MapPublicIpOnLaunch": true,
                "CidrBlock": {
                    "Ref": "PUBCIDR1"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                }
            }
        },
        "PublicSubnetAZ1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetAZ1"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicSubnetAZ2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "MapPublicIpOnLaunch": true,
                "CidrBlock": {
                    "Ref": "PUBCIDR2"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                }
            }
        },
        "PublicSubnetAZ2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetAZ2"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PrivateRouteToInternet": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGateway"
                }
            }
        },
        "PrivateSubnetAZ1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnetAZ1"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            }
        },
        "PrivateSubnetAZ1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PRIVCIDR1"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                }
            }
        },
        "PrivateSubnetAZ2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnetAZ2"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            }
        },
        "PrivateSubnetAZ2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PRIVCIDR2"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                }
            }
        },
        "WEBEC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "Enable access via port 22",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "SourceSecurityGroupId": {
                            "Ref": "BASTIONEC2SecurityGroup"
                        },
                        "Description": "Base Security Access from BASTION Server"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupId": {
                            "Ref": "PublicELBSecurityGroup"
                        },
                        "Description": "Default HTTP Access from Public ELB"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "122.55.14.126/32",
                        "Description": "Default HTTP Access from 122.55.14.126"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "SourceSecurityGroupId": {
                            "Ref": "BASTIONEC2SecurityGroup"
                        },
                        "Description": "Base Security Access to BASTION Server"
                    },
					{
                        "IpProtocol": "-1",
						"CidrIp": "0.0.0.0/0"
                   
                    }
                ]
            }
        },
        "BASTIONEC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "Enable access via port 22",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "122.55.14.126/32",
                        "Description": "Base Security Access from 122.55.14.126"
                    }
                ]
            }
        },
        "PublicELBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "Public ELB",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "PublicELBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 10,
                "HealthyThresholdCount": 4,
                "Matcher": {
                    "HttpCode": "200"
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            "Target-",
                            {
                                "Fn::GetAtt": [
                                    "PublicELB",
                                    "LoadBalancerName"
                                ]
                            }
                        ]
                    ]
                },
                "Port": 80,
                "Protocol": "HTTP",
                "TargetGroupAttributes": [
                    {
                        "Key": "deregistration_delay.timeout_seconds",
                        "Value": "20"
                    }
                ],
                "Targets": [
                    {
                        "Id": {
                            "Ref": "WebServer1"
                        },
                        "Port": 80
                    },
                    {
                        "Id": {
                            "Ref": "WebServer2"
                        },
                        "Port": 80
                    }
                ],
                "UnhealthyThresholdCount": 3,
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicELBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "PublicELBTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "PublicELB"
                },
                "Port": "80",
                "Protocol": "HTTP"
            }
        },
        "PublicELB": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": "internet-facing",
                "Subnets": [
                    {
                        "Ref": "PublicSubnetAZ1"
                    },
                    {
                        "Ref": "PublicSubnetAZ2"
                    }
                ],
                "LoadBalancerAttributes": [
                    {
                        "Key": "idle_timeout.timeout_seconds",
                        "Value": "50"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "PublicELBSecurityGroup"
                    }
                ]
            }
        },
        "WebServer1": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "Comment1": "Configure the bootstrap helpers to install the Apache Web Server",
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "Install": [
                            "Install"
                        ]
                    },
                    "Install": {
                        "packages": {
                            "yum": {
                                "httpd": []
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "httpd": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/bin/cfn-init -v ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource WebServer1",
                                " --configsets Install ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMIAmazon"
                    ]
                },
                "InstanceType": "t2.micro",
                "KeyName": {
                    "Ref": "WEBEC2KeyName"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Web Server 1"
                    }
                ],
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "WEBEC2SecurityGroup"
                            }
                        ],
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "PrivateSubnetAZ1"
                        }
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "WebServerInstanceProfile"
                }
            }
        },
        "WebServer2": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "Comment1": "Configure the bootstrap helpers to install the Apache Web Server",
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "Install": [
                            "Install"
                        ]
                    },
                    "Install": {
                        "packages": {
                            "yum": {
                                "httpd": []
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "httpd": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/bin/cfn-init -v ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource WebServer2",
                                " --configsets Install ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMIAmazon"
                    ]
                },
                "InstanceType": "t2.micro",
                "KeyName": {
                    "Ref": "WEBEC2KeyName"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Web Server 2"
                    }
                ],
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "WEBEC2SecurityGroup"
                            }
                        ],
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "PrivateSubnetAZ2"
                        }
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "WebServerInstanceProfile"
                }
            }
        },
        "BastionServer": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMIAmazon"
                    ]
                },
                "InstanceType": "t2.micro",
                "KeyName": {
                    "Ref": "BASTIONEC2KeyName"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Bastion Server"
                    }
                ],
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "BASTIONEC2SecurityGroup"
                            }
                        ],
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "PublicSubnetAZ2"
                        }
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "BastionServerInstanceProfile"
                }
            }
        },
        "WebServerRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "WebServerInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "WebServerRole"
                    }
                ]
            }
        },
        "BastionServerRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "BastionServerInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "BastionServerRole"
                    }
                ]
            }
        }
    }
}